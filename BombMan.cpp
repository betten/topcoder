// http://community.topcoder.com/stat?c=problem_statement&pm=2274&rd=5009
// Problem Name:	 BombMan
// Used In:	 TCCC '04 Round 4
// Used As:	 Division I Level Two
// Categories:	 Graph Theory, Search
#include <vector>
#include <iostream>
#include <string>
#include <queue>

using namespace std;

struct node {
	int i;
	int j;
	int bombs;
	int time;
};

class CompareNode {
	public:
	bool operator()(node &n1, node &n2) {
		return (n1.time > n2.time);
	}
};

class BombMan {
	public:
	
	int shortestPath(vector<string> maze, int bombs) {
		priority_queue<node, vector<node>, CompareNode> q;
		
		int I = maze.size();
		int J = maze[0].size();
		
		bool visited[I][J];
		node B;
		
		for(int i = 0; i < I; i++) {
			for(int j = 0; j < J; j++) {
				if(maze[i][j] == 'B') {
					B = { i, j, bombs, 0 };
				}
				visited[i][j] = false;
			}
		}
		
		q.push(B);
		
		while(!q.empty()) {
			B = q.top();
			q.pop();
			
			if(B.i < 0 || B.i > I - 1 || B.j < 0 || B.j > J - 1) continue;
			
			if(visited[B.i][B.j]) continue;
			visited[B.i][B.j] = true;
			
			if(maze[B.i][B.j] == 'E') return B.time;

			int time = B.time + 1;
			int bombs = B.bombs;
			if(maze[B.i][B.j] == '#') {
				if(bombs <= 0) continue;
				bombs--;
				time += 2;
			}
			
			q.push({ B.i + 1, B.j, bombs, time });
			q.push({ B.i - 1, B.j, bombs, time });
			q.push({ B.i, B.j + 1, bombs, time });
			q.push({ B.i, B.j - 1, bombs, time });
		}
		
		return -1;
	}
};

int main() {
	BombMan b;
	cout << b.shortestPath({".....B.",
 ".#####.",
 ".#...#.",
 ".#E#.#.",
 ".###.#.",
 "......."}, 1) << endl; // 8
 
	cout << b.shortestPath({"B.#.#.#...E"}, 2) << endl; // -1
	
	cout << b.shortestPath({"..#####",
 "B.#####",
 "..#####",
 "#######",
 "####...",
 "####.E."}, 4) << endl; // 17
 
	cout << b.shortestPath({".#.#.#.#B#...#.#...#.#...#.#...#.#...#.#.#.......",
 ".#.#.#.#.#.###.###.#.###.#.#.###.###.#.#.#.###.##",
 ".#.#.#...#.#.#.#.#.#...#.....#.#.#...#...#.#.#...",
 ".#.#.###.#.#.#.#.#.###.#.#####.#.###.###.#.#.###.",
 ".............#.#...#...#.....#.#.#...#.#.#.....#.",
 "##.#######.###.#.#####.#.#####.#.###.#.#.#.#.####",
 ".#.#.....#...#...#.#...#...#.#.#...#...#...#.....",
 ".#######.#.#####.#.#.#.#.###.#.###.#.#####.#.####",
 ".#.#.#.#...#.#.#.#.#.#.......#...#.#...#.#.#.....",
 ".#.#.#.###.#.#.#.#.#####.#####.###.###.#.#.######",
 ".....#...#.#...#...#...#...#...#...#.#.#.........",
 "####.###.#.###.###.#.###.#.#.###.###.#.#.########",
 ".......#.........#.#.#.#.#.#.#.#.........#...#...",
 ".#.###.#########.#.#.#.#.###.#.#####.#.#.#.###.##",
 ".#.#.........#.#.#.#.#.....#.#.#.....#.#.........",
 "############.#.#.#.#.#.#####.#.#.################",
 ".#...........#...#.#.#.#...#.#.#...#.#.#.....#...",
 ".#####.#####.###.#.#.#.#.###.#.#.###.#.#.#####.##",
 ".......#...#.#.#.....#...#...#.#.#.#.#...........",
 "##########.#.#.#####.#.###.###.#.#.#.#.##########",
 ".....#...#.....#.#...#.......#.#...#.......#.....",
 "##.#.###.#.###.#.#.#.#.#####.#.#.###.#######.####",
 "...#...#...#.......#.....#.#...#...#.......#.....",
 "####.#.#.#########.#.###.#.#####.###.#.#######.##",
 ".#...#...#.........#.#.....#.........#.#.#.#.....",
 ".#####.#.#.###.#######.#.###.#.#########.#.#.####",
 ".......#.#.#...#.......#.....#.#.#.......#.#.#.#.",
 "########.#.#.#.#####.#.###.#.###.#.#######.#.#.#.",
 ".........#.#.#.#.....#...#.#.........#.#.........",
 "################.#.#.#.#.#.#.#.#######.#.########",
 ".................#.#.#.#.#.#.#...........#.......",
 "########.#####.#.###.#.#.#####.###.#.#####.###.##",
 ".........#...#.#...#.#.#...#.....#.#.........#...",
 ".#####.#####.#.###.#.###.#.#.#.#.#.#####.#.###.#.",
 ".#.....#.........#.#.#...#.#.#.#.#.#.....#...#.#.",
 "####.#####.###.#.#.#.#.#.#.###.###.#.#.#.#.#####.",
 ".....#.....#.#.#.#.#.#.#.#.#...#...#.#.#.#...#...",
 "####.#.#.###.#.#.###.#.###.#.#.#####.#.#.#.######",
 ".....#.#.#.#...#...#.#...#.#.#...#...#.#.#.......",
 "##########.#.#.#.#####.###.#.#.###.#.###.#####.##",
 "...#.#...#...#.#.....#.#...#.#...#.#.#.......#...",
 ".#.#.#.#.#.#.#.#.#.#.###.#.#########.###.#.#.#.#.",
 ".#.#...#...#.#.#.#.#...#.#...#.......#...#.#.#.#.",
 "##.###.#.#.###.#.#.#.#.#####.#.#.#.###.#.########",
 ".......#.#...#.#.#.#.#.#.....#.#.#...#.#.........",
 "####.#######.#.#####.#.###.#.#.###.#.#.#.########",
 "E..#.......#.#.....#.#.#.#.#.#.#...#.#.#.........",
 "##.#.#.#.###.###.###.###.#.#.###.#.#.#.#.#######.",
 ".....#.#...#.#.....#.#.....#...#.#.#.#.#.....#..."}, 3) << endl; // 76

}
